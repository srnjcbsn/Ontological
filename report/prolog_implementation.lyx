#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Our prolog program is designed for class relationship queries in the pancreas
 ontology.
 
\end_layout

\begin_layout Standard
The program consists of the definitions to query for relationship information
 as defined by the CRL (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:relations.pl"

\end_inset

) and all the raw data of the pancreas ontology (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:relationsdb.pl"

\end_inset

).
\end_layout

\begin_layout Standard
According to CRL, we have four different types of relationships, namely
 
\begin_inset Formula $\forall\forall$
\end_inset

, 
\begin_inset Formula $\forall\exists$
\end_inset

, 
\begin_inset Formula $\exists\forall$
\end_inset

 and 
\begin_inset Formula $\exists\exists$
\end_inset

.
 For the pancreas ontology we will only use 
\begin_inset Formula $\forall\exists$
\end_inset

 as it is the only type of relation specified in the ontology.
 In our analysis of the pancreas ontology (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:The-pancreas-ontology"

\end_inset

) we determined that there are five types of relations, namely 
\emph on
is_a
\emph default
, 
\emph on
has_part
\emph default
, 
\emph on
part_for
\emph default
, 
\emph on
part_of
\emph default
 and 
\emph on
secretes
\emph default
.
 In order to have a complete database, we have recorded all these relations,
 except for 
\emph on
part_of
\emph default
 as it can be derived from the rule that a class 
\emph on
A 
\emph default
has the 
\emph on
part_of
\emph default
 relation with respect to 
\emph on
B
\emph default
 if both 
\begin_inset Quotes eld
\end_inset


\emph on
B
\emph default
 
\emph on
part_for
\emph default
 
\emph on
A
\emph default

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\emph on
A
\emph default
 
\emph on
has_part
\emph default
 
\emph on
B
\emph default

\begin_inset Quotes erd
\end_inset

 as defined in 
\begin_inset CommandInset citation
LatexCommand cite
key "rosse2004a"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
Storing data in the database
\end_layout

\begin_layout Standard
As data must be defined in CRL-Meta, the classes as well as the relations
 are defined as constants, including class inclusion as it is a special
 case of a relation.
 Furthermore, we require that all classes are explicitly recorded with the
 
\family typewriter
class/1
\family default
 predicate, as we do not want class conception to come from its relations.
 While this in itself is good practice, there is also inherent value in
 having the ability to query all classes of the KB efficiently.
 
\end_layout

\begin_layout Standard
To define a class the user inserts: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class(A)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where A is the class he wants to be part of the database such as 
\emph on
cell
\emph default
, 
\emph on
pp_cell
\emph default
, etc.
\end_layout

\begin_layout Standard
To define a relation 
\family typewriter
\emph on
R
\family default
\emph default
 between two classes 
\family typewriter
\emph on
A
\family default
\emph default
 and 
\family typewriter
\emph on
B
\family default
\emph default
, the user inserts:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ae_relation(R, A, B)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the name 
\family typewriter
ae_relation
\family default
 refer to it being a 
\begin_inset Formula $\forall\exists$
\end_inset

- relation.
\end_layout

\begin_layout Subsubsection*
Querying the relations
\end_layout

\begin_layout Standard
To query the database on different relations we have defined the predicate
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
\align center

:- ae(R, A, B)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where
\end_layout

\begin_layout Description

\family typewriter
\emph on
R
\family default
\emph default
 is the relation that the user want to check, which can be 
\emph on
is_a
\emph default
, 
\emph on
has_part
\emph default
, etc.
 it is also possible to leave 
\family typewriter
\emph on
R
\family default
\emph default
 as a variable, such that the program will try to find all existing relations
 between 
\family typewriter
\emph on
A
\family default
\emph default
 and 
\family typewriter
\emph on
B
\family default
\emph default
, instead fo a single, specific relation.
\end_layout

\begin_layout Description

\family typewriter
\emph on
A
\family default
\emph default
,
\begin_inset space ~
\end_inset


\family typewriter
\emph on
B
\family default
\emph default
 are the two classes for which the user want to check whether the given
 relation holds true.
 The full query should be read as 
\family typewriter
\emph on
A R B
\family default
\emph default
, for instance 
\emph on
pp_cell
\emph default
 
\emph on
is_a
\emph default
 
\emph on
cell
\emph default
.
\end_layout

\begin_layout Standard
To define an 
\begin_inset Formula $\forall\exists$
\end_inset

 query we set it up as three indivual rules: the identity rule of 
\emph on
is_a
\emph default
, the transitivity rule and the rule to define 
\emph on
part_of
\emph default
.
 The identity rule is trivial as it is defined as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ae(is_a, A, A).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
as is the 
\emph on
part_of
\emph default
 rule, defined as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ae(part_of, A, B) :- ae(has_a,B,A), ae(part_for,A,B)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To define the transitivity rule, we take into consideration the inheritance
 axioms for 
\emph on
is_a
\emph default
 presented in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Class-relationship-logic"

\end_inset

 (equations 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:inheritax1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:inheritax2"

\end_inset

).
 As such the two first rules of transitivity are well known:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

transitivity(R, A, B) :- relation_ae(R, A, B).
\end_layout

\begin_layout Plain Layout

transitivity(R, A, C) :-
\end_layout

\begin_layout Plain Layout

	relation_ae(R, A, B), 
\end_layout

\begin_layout Plain Layout

	transitivity(R, B, C).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our definition of transitivity is not exactly the same as the crl version
 stated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:transitivity_crl"

\end_inset

, as that would introduce a termination problem if directly implemented
 in prolog.
 The version which we have defined accomplishes the exact same rule but
 requires data to be present for it pursue the recursion path.
 If we chose to define it as the crl version it would look like this
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

transitivity(R, A, B) :- relation_ae(R, A,B).
\end_layout

\begin_layout Plain Layout

transitivity(R, A, C) :-
\end_layout

\begin_layout Plain Layout

	transitivity(R, A, B), 
\end_layout

\begin_layout Plain Layout

	transitivity(R, B, C).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However as prolog does a DFS (depth-first search) it would match on the
 first transitivity predicate at the recursion rule, and given that the
 variable 
\family typewriter
\emph on
B
\family default
\emph default
 is free, this would cause the next recursion to also contain a free variable
 and thus cause an infinite loop.
\end_layout

\begin_layout Standard
Next in the transitivity rules we need to define a rule to accomodate class
 inheritance, as such the incorporation of the inheritance axioms are defined
 as
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

transitivity(R,A,C):-
\end_layout

\begin_layout Plain Layout

	R 
\backslash
= is_a,
\end_layout

\begin_layout Plain Layout

	ae_relation(is_a,A,B),
\end_layout

\begin_layout Plain Layout

	transitivity(R,B,C).
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
where if you replace 
\family typewriter
\emph on
A
\family default
\emph default
 with 
\family typewriter
\emph on
C'
\family default
\emph default
, 
\family typewriter
\emph on
C
\family default
\emph default
 with 
\family typewriter
\emph on
D
\family default
\emph default
 and 
\family typewriter
\emph on
B
\family default
\emph default
 with 
\family typewriter
\emph on
C
\family default
\emph default
, you will get the exact same as defined in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "BROKEN: Format: eq:inheritax1"

\end_inset

.
 Furthermore notice that as we do not recognize 
\emph on
is_a
\emph default
 as a first class citizens we must include a negation as failure on 
\emph on
is_a
\emph default
 to avoid a duplicate answer.
 The same holds for 
\begin_inset CommandInset ref
LatexCommand formatted
reference "BROKEN: Format: eq:inheritax2"

\end_inset

, which is trivial once you understand the first.
\end_layout

\begin_layout Standard
A last thing to note is that to avoid duplicate answers we have chosen to
 wrap our 
\family typewriter
ae
\family default
 predicate in a 
\family typewriter
setof
\family default
 which filters the answer.
 This has no theoretical value, but is rather convenient.
\end_layout

\begin_layout Subsubsection*
Overlap and Disjoint
\end_layout

\begin_layout Standard
To check for overlapping classes, use the following predicate:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

:- overlap(A, B, X)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where
\end_layout

\begin_layout Description

\family typewriter
\emph on
A
\family default
\emph default
,
\begin_inset space ~
\end_inset


\family typewriter
\emph on
B
\family default
\emph default
 are the classes which we chaeck for overlap.
\end_layout

\begin_layout Description

\family typewriter
\emph on
X
\family default
\emph default
 is the class which causes the 
\family typewriter
\emph on
A
\family default
\emph default
 and 
\family typewriter
\emph on
B
\family default
\emph default
 to overlap.
 An underscore can be used in its place if this information is not deemed
 relevant.
\end_layout

\begin_layout Standard
Overlap follow the 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:overlap_crl"

\end_inset

 as we stated earlier, which is that there exists a class 
\family typewriter
\emph on
X
\family default
\emph default
 which is the desendant of both 
\family typewriter
\emph on
A
\family default
\emph default
 and 
\family typewriter
\emph on
B
\family default
\emph default
, thus we define overlap only consist of the rule
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

common_descendant(X, A, B)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
and we define a common descendant by 
\family typewriter
\emph on
X
\family default
\emph default
 having both 
\family typewriter
\emph on
A
\family default
\emph default
 and 
\family typewriter
\emph on
B
\family default
\emph default
 ancestors, ie.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ancestor(X, A), ancestor(X, B)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
combined this will find all overlaps according to 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:overlap_crl"

\end_inset

.
\end_layout

\begin_layout Standard
An interesting property of the definition is that it will conclude that
 two classes which are lineally related also overlap, ie.
 classes where either of them is the ancestor of the other.
 While this is clearly a question of definition, it might not be relavant
 to the user that two classes are lineally related.
 To accommondate this, we introduce the following predicate:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

:- overlap_lineally_unrelated(A, B, X)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
which has the same input scheme as the overlap predicate.
 The definition of this predicate is merely an extension to the overlap
 definition, adding the two extra rules
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout


\backslash
+ ancestor(A, B), 
\backslash
+ ancestor(B, A).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
which ensure that the rule will fail when 
\family typewriter
\emph on
A
\family default
\emph default
 and 
\family typewriter
\emph on
B
\family default
\emph default
 are lineally related.
\end_layout

\begin_layout Standard
To check whether two classes are disjoint, ie.
 not overlapping, the following predicate can be used:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

:- disjoint(C, D)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where 
\end_layout

\begin_layout Description

\family typewriter
\emph on
C
\family default
\emph default
,
\begin_inset space ~
\end_inset


\family typewriter
\emph on
D
\family default
\emph default
 are the two classes which are checked for disjointness.
\end_layout

\begin_layout Standard
Our 
\family typewriter
disjoint
\family default
 predicate follows the definition stated in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:disjoint_crl"

\end_inset

, which is the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout


\backslash
+ overlap(C, D, _)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Which means that two classes are disjoint if they are not overlapping.
 We also require that the two input variables must be classes:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class(C), class(D)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the reason being that we need to lock the variables 
\family typewriter
\emph on
C
\family default
\emph default
 and 
\family typewriter
\emph on
D
\family default
\emph default
 for the negation as failure definition to work, given open variables on
 the input to disjoint.
\end_layout

\begin_layout Subsubsection*
Error checking
\end_layout

\begin_layout Standard
When recording data into the database input errors can occur easily which
 will cause properties of the relations to no longer hold.
 Thus it is convient for a user to be able to check the database in real
 time.
 To do this we have defined the predicate
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

:- error(O)
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
\emph on
O
\family default
\emph default
 is the output of the error, which is a tuple of different length depending
 on the error.
\end_layout

\begin_layout Standard
There are three different types of errors that can occur in our database
\end_layout

\begin_layout Description

\family typewriter
class_missing
\family default
 is when a class has a relation with another class but is not defined in
 our class table.
\end_layout

\begin_layout Description

\family typewriter
reflexive
\family default
 is when a relation is found to be reflexive as the property of all our
 relations is that they are irreflexive, this error will ignore the is_a
 relation as that relation in constrast to the others actually is reflexive.
\end_layout

\begin_layout Description

\family typewriter
symmetric_with
\family default
 is when a class has a symmetric relation with another class, using the
 definition of symmetri from 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:symmetric_crl"

\end_inset

.
 The output will the two classes which causes the symmetri and with which
 relation.
\end_layout

\end_body
\end_document
