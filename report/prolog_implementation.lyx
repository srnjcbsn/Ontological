#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Our prolog program is designed for effective class relationship queries
 in the pancreas ontology.
 
\end_layout

\begin_layout Standard
The program consists of the definitions to query for relationship information
 as defined by the CRL and all the raw data of the pancreas ontology.
\end_layout

\begin_layout Standard
According to CRL we have four different types of relationships 
\begin_inset Formula $\forall\forall$
\end_inset

, 
\begin_inset Formula $\forall\exists$
\end_inset

, 
\begin_inset Formula $\exists\forall$
\end_inset

 and 
\begin_inset Formula $\exists\exists$
\end_inset

.
 However for the pancreas ontology we will only use 
\begin_inset Formula $\forall\exists$
\end_inset

 as it is the only type of relation specified in the ontology.
 In our prior analyze of the pancreas ontology we have determined that there
 are five types of relations is_a, has_a, part_for, part_of and secretes.
 Thus in order to have a complete database we have recorded all these relations,
 except for part_of as it can be derived from the rule that a class A is
 part_of B, if both B is part_for A and A has_a B as defined in (REF TO
 SMITH AND RUSSEL).
 
\end_layout

\begin_layout Paragraph*
Recording in the database
\end_layout

\begin_layout Standard
As data must be defined in CRL-Meta, the classes are defined as constants
 aswell as the relations, including class inclusion as it is only a special
 case of a relation.
 Furthermore, we require that all classes are recorded as we do not want
 class conception to come from its relations, while this among other things
 is good practice, as hinging a class's existances on its relations is not
 recommended, there is also inherent value in having the ability to efficiently
 query all classes of the KB.
 
\end_layout

\begin_layout Standard
To define a class the user inserts: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class(A)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where A is the class he wants to be part of the database such as cell, pp_cell,..
 ect.
\end_layout

\begin_layout Standard
To define a relation between two classes the user inserts:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

relation_ae(R, A, B)
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Querying the relations
\end_layout

\begin_layout Standard
To query the database on different relations we have defined the predicate
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
\align center

:- query(R, A, B)
\end_layout

\end_inset


\end_layout

\begin_layout Description
R is the relation that the user want to check, which can be is_a, has_a,
 etc.
 it is also possible to leave R unbounded, such that the program will try
 to find all the relations instead, instead of just checking an specific.
\end_layout

\begin_layout Description
A,
\begin_inset space ~
\end_inset

B is the two classes which the user want to check whether the given relation
 holds true, the full query should be read as A R B, for instance pp_cell
 is_a cell.
 
\end_layout

\begin_layout Itemize
Explain usage
\end_layout

\begin_layout Itemize
Explain features
\end_layout

\begin_layout Itemize
How did we use principles of CRL in prolog
\end_layout

\begin_layout Itemize
How to deal with termination problems
\end_layout

\end_body
\end_document
